{"version":3,"sources":["components/PlaylistChunk/delete.svg","components/PlaylistChunk/edit.svg","components/YourPlaylist/refresh.svg","util/Spotify.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/PlaylistChunk/PlaylistChunk.js","components/YourPlaylist/YourPlaylist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","expirationTime","Track","this","props","isRemoval","addTrack","track","removeTrack","className","name","artist","album","onClick","handleClickEvent","bind","renderAction","React","Component","TrackList","tracks","map","x","key","id","makeTrack","SearchBar","state","input","e","setState","target","value","console","log","onSearch","onKeyPress","handleKeyPress","onChange","handleTermChange","placeholder","handleClick","SearchResults","searchResults","PlayList","updateName","onSave","onExit","edit","search","playListName","handleInput","playListTracks","accessToken","tokenReg","expReg","authEndpoint","encodeURIComponent","Spotify","getHeader","myHeaders","Headers","append","method","headers","mode","cache","getAccessToken","window","location","href","match","token","setTimeout","history","pushState","getUserId","myInit","fetch","response","ok","json","responseJson","Error","searchTrack","items","artists","uri","error","getPlaylist","myHeader","uID","request","getThisPlaylist","playlistId","Authorization","savePlaylist","playlistName","tracksUris","body","JSON","stringify","idResponse","playlistID","uris","editPlaylist","deletePlayList","PlaylistChunk","deletePlaylist","playlist","src","alt","handleEditClick","handleDeleteClick","delet","YourPlaylist","playlists","updateList","loading","displayList","createPlaylist","App","playListId","trackURIs","yourPlaylists","updatePlaylistName","updatePlaylist","then","newPlaylist","filter","catch","length","tmpTrack","item","displayPlaylist","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.506ed86a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.665926e2.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.2927f8de.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.899514fa.svg\";","const clientId = 'fda3dbd984a14a6ea8e9d75434e28d7b';\r\nlet accessToken = '';\r\nlet expirationTime;\r\n// const clientSecret = '3b1b242035334f398ad428bb47979af1';\r\n// const CORSProxy = 'https://cors-anywhere.herokuapp.com/';\r\nconst tokenReg = /access_token=([^&]*)/;\r\nconst expReg = /expires_in=([^&]*)/;\r\nconst baseURL = 'https://api.spotify.com/v1/search?type=track&q=';\r\nconst userId = '';\r\nconst scope = encodeURIComponent('playlist-modify-public');\r\n\r\nconst authEndpoint =\r\n  'https://accounts.spotify.com/authorize?' +\r\n  'client_id=' +\r\n  clientId +\r\n  '&response_type=token' +\r\n  '&redirect_uri=https://larprad.github.io/spotijam&scope=' +\r\n  scope;\r\n\r\nexport const Spotify = {\r\n  // connected: false,\r\n\r\n  getHeader() {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append('Authorization', 'Bearer ' + accessToken);\r\n    const myInit = {\r\n      method: 'GET',\r\n      headers: myHeaders,\r\n      mode: 'cors',\r\n      cache: 'default',\r\n    };\r\n    return myInit;\r\n  },\r\n\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      console.log('token detected');\r\n      return accessToken;\r\n    } else if (window.location.href.match(tokenReg)) {\r\n      console.log('access token is in URL');\r\n      const token = window.location.href.match(tokenReg);\r\n      expirationTime = window.location.href.match(expReg)[1];\r\n      accessToken = token[1];\r\n      window.setTimeout(() => (accessToken = ''), expirationTime * 1000);\r\n      window.history.pushState('', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      console.log('need to get the token');\r\n      window.location = authEndpoint;\r\n    }\r\n  },\r\n\r\n  async getUserId() {\r\n    const myInit = this.getHeader();\r\n    try {\r\n      const response = await fetch('https://api.spotify.com/v1/me?id', myInit);\r\n      if (response.ok) {\r\n        const responseJson = await response.json();\r\n        console.log('user ID');\r\n        console.log(responseJson.id);\r\n        return responseJson.id;\r\n      } else {\r\n        throw new Error('user info fectch failed');\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  },\r\n\r\n  async searchTrack(track) {\r\n    if (track) {\r\n      const myInit = this.getHeader();\r\n      try {\r\n        const response = await fetch(baseURL + track, myInit);\r\n        if (response.ok) {\r\n          const responseJson = await response.json();\r\n          const tracks = responseJson.tracks.items.map((x) => {\r\n            return {\r\n              name: x.name,\r\n              album: x.album.name,\r\n              artist: x.artists.map((x) => x.name),\r\n              uri: x.uri,\r\n              id: x.id,\r\n            };\r\n          });\r\n          return tracks;\r\n        } else {\r\n          throw new Error('failed fetch');\r\n        }\r\n      } catch (e) {\r\n        return console.error(e);\r\n      }\r\n    } else {\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async getPlaylist() {\r\n    const myHeader = this.getHeader();\r\n    try {\r\n      const uID = !userId ? await this.getUserId() : userId;\r\n      const request = `https://api.spotify.com/v1/users/${uID}/playlists`;\r\n      const response = await fetch(request, myHeader);\r\n      const responseJson = await response.json();\r\n      console.log(responseJson);\r\n      return responseJson.items;\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  },\r\n\r\n  async getThisPlaylist(playlistId) {\r\n    try {\r\n      const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + accessToken,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        method: 'GET',\r\n        mode: 'cors',\r\n        cache: 'default',\r\n      });\r\n      const responseJson = await response.json();\r\n      console.log(responseJson);\r\n      const tracks = responseJson.items.map((x) => {\r\n        return {\r\n          name: x.track.name,\r\n          album: x.track.album.name,\r\n          artist: x.track.artists.map((x) => x.name),\r\n          uri: x.track.uri,\r\n          id: x.track.id,\r\n        };\r\n      });\r\n      console.log(tracks);\r\n      return tracks;\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  },\r\n\r\n  async savePlaylist(playlistName, tracksUris) {\r\n    console.log('save new playlist');\r\n    console.log(`playlistName: ${playlistName}`);\r\n    console.log('tracksUris');\r\n    console.log(tracksUris);\r\n    if (!playlistName || !tracksUris) {\r\n      console.log('no args');\r\n    } else {\r\n      try {\r\n        const uID = !userId ? await this.getUserId() : userId;\r\n        const idResponse = await fetch(\r\n          `https://api.spotify.com/v1/users/${uID}/playlists?scope=playlist-modify-public`,\r\n          {\r\n            headers: {\r\n              Authorization: 'Bearer ' + accessToken,\r\n              'Content-Type': 'application/json',\r\n            },\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            body: JSON.stringify({ name: playlistName }),\r\n          }\r\n        );\r\n        const responseJson = await idResponse.json();\r\n        const playlistID = responseJson.id;\r\n        console.log('playlist ID');\r\n        console.log(playlistID);\r\n        await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + accessToken,\r\n            'Content-Type': 'application/json',\r\n          },\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          cache: 'default',\r\n          body: JSON.stringify({ uris: tracksUris }),\r\n        });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  },\r\n\r\n  async editPlaylist(playlistId, tracksUris) {\r\n    console.log('edit playlist');\r\n    console.log(`playlist ID: ${playlistId}`);\r\n    console.log('tracksUris');\r\n    console.log(tracksUris);\r\n    if (!playlistId || !tracksUris) {\r\n      console.log('no args');\r\n    } else {\r\n      try {\r\n        const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n          headers: {\r\n            Authorization: 'Bearer ' + accessToken,\r\n            'Content-Type': 'application/json',\r\n          },\r\n          method: 'PUT',\r\n          mode: 'cors',\r\n          cache: 'default',\r\n          body: JSON.stringify({ uris: tracksUris }),\r\n        });\r\n        console.log('edit response');\r\n        console.log(response);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  },\r\n\r\n  async deletePlayList(playlistId) {\r\n    try {\r\n      const response = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/followers`, {\r\n        method: 'DELETE',\r\n        headers: { Authorization: 'Bearer ' + accessToken },\r\n        mode: 'cors',\r\n        cache: 'default',\r\n      });\r\n      response.ok ? console.log('delete success') : console.log('potato in the sauasage');\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  },\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n  renderAction() {\r\n    if (this.props.isRemoval === true) {\r\n      return '+';\r\n    } else {\r\n      return '-';\r\n    }\r\n  }\r\n\r\n  handleClickEvent() {\r\n    this.props.isRemoval\r\n      ? this.props.addTrack(this.props.track)\r\n      : this.props.removeTrack(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>\r\n            {this.props.track.artist} | {this.props.track.album}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={this.handleClickEvent.bind(this)}\r\n          className=\"Track-action\"\r\n        >\r\n          {this.renderAction()}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTrack.propTypes = {\r\n  track: PropTypes.object.isRequired,\r\n  isRemoval: PropTypes.bool\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TrackList.css';\r\nimport { Track } from '../Track/Track';\r\n\r\nexport class TrackList extends React.Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   if (nextProps.tracks === this.props.tracks) {\r\n  //     console.log('Tracklist should not update');\r\n  //     return false;\r\n  //   } else {\r\n  //     console.log('Tracklist should update');\r\n  //     return true;\r\n  //   }\r\n  // }\r\n\r\n  // componentDidMount() {}\r\n\r\n  makeTrack() {\r\n    if (this.props.tracks) {\r\n      return this.props.tracks.map(x => (\r\n        <Track\r\n          key={x.id}\r\n          track={x}\r\n          addTrack={this.props.addTrack}\r\n          isRemoval={this.props.isRemoval}\r\n          removeTrack={this.props.removeTrack}\r\n        />\r\n      ));\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  render() {\r\n    return <div className=\"TrackList\">{this.makeTrack()}</div>;\r\n  }\r\n}\r\n\r\nTrackList.propTypes = {\r\n  tracks: PropTypes.array\r\n};\r\n\r\n// TrackList.defaultProps = {\r\n//   tracks: [{ id: 'template', name: ' ', album: ' ', artist: ' ' }]\r\n// };\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\nexport class SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { input: '' };\r\n  }\r\n  handleTermChange(e) {\r\n    this.setState({ input: e.target.value });\r\n  }\r\n\r\n  handleClick() {\r\n    console.log('click');\r\n    this.props.onSearch(this.state.input);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (e.key === 'Enter') {\r\n      console.log('Enter is pressed');\r\n      this.props.onSearch(this.state.input);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div onKeyPress={this.handleKeyPress.bind(this)} className=\"SearchBar\">\r\n        <input\r\n          onChange={this.handleTermChange.bind(this)}\r\n          placeholder=\"Look for songs here!\"\r\n        />\r\n        <button onClick={this.handleClick.bind(this)} className=\"SearchButton\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchResults.css';\r\nimport { TrackList } from '../TrackList/TrackList';\r\n\r\nexport class SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h3 className=\"searchTitle\">Search results</h3>\r\n        <TrackList\r\n          addTrack={this.props.addTrack}\r\n          tracks={this.props.searchResults}\r\n          isRemoval={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchResults.propTypes = {\r\n  searchResults: PropTypes.array.isRequired\r\n};\r\n","import React from 'react';\r\nimport './PlayList.css';\r\nimport { TrackList } from '../TrackList/TrackList';\r\nimport { SearchBar } from '../SearchBar/SearchBar';\r\nimport { SearchResults } from '../SearchResults/SearchResults';\r\n\r\nexport class PlayList extends React.Component {\r\n  handleInput(e) {\r\n    this.props.updateName(e.target.value);\r\n  }\r\n\r\n  onSave() {\r\n    this.props.onSave();\r\n  }\r\n\r\n  onExit() {\r\n    this.props.onExit();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist niceBox\">\r\n        <h2 className=\"sectionTitle\">\r\n          {this.props.edit === 'edit'\r\n            ? 'Edit your PlayList'\r\n            : 'Create a Playlist'}\r\n        </h2>\r\n        <div className=\"playlistFlexContainer\">\r\n          <div className=\"flexChild\">\r\n            <SearchBar onSearch={this.props.search} />\r\n            <SearchResults\r\n              addTrack={this.props.addTrack}\r\n              searchResults={this.props.searchResults}\r\n            />\r\n          </div>\r\n          <div className=\"flexChild\">\r\n            <input\r\n              placeholder={'Your Playlist Name'}\r\n              value={this.props.playListName}\r\n              // defaultValue={'Enter Playlist Name'}\r\n              onChange={this.handleInput.bind(this)}\r\n            />\r\n            <div className=\"trackListContainer\">\r\n              <TrackList\r\n                tracks={this.props.playListTracks}\r\n                isRemoval={false}\r\n                removeTrack={this.props.removeTrack}\r\n              />\r\n            </div>\r\n            <div className=\"buttonSaveContainer\">\r\n              <button onClick={this.props.onSave} className=\"Playlist-save\">\r\n                Save\r\n              </button>\r\n              <button onClick={this.props.onExit} className=\"Playlist-save\">\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './PlaylistChunk.css';\r\nimport delet from './delete.svg';\r\nimport edit from './edit.svg';\r\n\r\nexport class PlaylistChunk extends React.Component {\r\n  handleDeleteClick() {\r\n    this.props.deletePlaylist(this.props.id);\r\n  }\r\n\r\n  handleEditClick() {\r\n    this.props.editPlaylist(this.props.id, this.props.playlist);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"PlaylistChunk\">\r\n        <h2 className=\"PlaylistTitle\">{this.props.playlist}</h2>\r\n        <div className=\"buttonContainer\">\r\n          <div className=\"chunkButtonDiv\">\r\n            <img\r\n              src={edit}\r\n              alt=\"edit\"\r\n              onClick={this.handleEditClick.bind(this)}\r\n            />\r\n          </div>\r\n          <div className=\"chunkButtonDiv\">\r\n            <img\r\n              onClick={this.handleDeleteClick.bind(this)}\r\n              src={delet}\r\n              alt=\"delete\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { PlaylistChunk } from '../PlaylistChunk/PlaylistChunk';\r\nimport loading from './refresh.svg';\r\nimport './YourPlaylist.css';\r\n\r\nexport class YourPlaylist extends React.Component {\r\n  componentDidMount() {\r\n    console.log('I am here');\r\n    this.props.getPlaylist();\r\n  }\r\n\r\n  displayList() {\r\n    return this.props.playlists.map(x => (\r\n      <PlaylistChunk\r\n        deletePlaylist={this.props.deletePlaylist}\r\n        editPlaylist={this.props.editPlaylist}\r\n        key={x.id}\r\n        playlist={x.name}\r\n        id={x.id}\r\n      />\r\n    ));\r\n  }\r\n\r\n  updateList() {\r\n    this.props.getPlaylist();\r\n    console.log('Your Playlists have been updated');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"YourPlaylist niceBox\">\r\n        <h2 className=\"sectionTitle\">Your Playlists</h2>\r\n        <img\r\n          onClick={this.updateList.bind(this)}\r\n          className=\"update\"\r\n          src={loading}\r\n          alt=\"loading\"\r\n        />\r\n        <div>{this.displayList()}</div>\r\n        <button onClick={this.props.createPlaylist} className=\"Playlist-save\">\r\n          Create new Playlist\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n// import { SearchBar } from '../SearchBar/SearchBar';\r\n// import { SearchResults } from '../SearchResults/SearchResults';\r\nimport { PlayList } from '../Playlist/Playlist';\r\nimport { Spotify } from '../../util/Spotify';\r\nimport { YourPlaylist } from '../YourPlaylist/YourPlaylist';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      edit: 'none',\r\n      searchResults: [],\r\n      playListName: '',\r\n      playListId: '',\r\n      trackURIs: [],\r\n      playListTracks: [],\r\n      yourPlaylists: []\r\n    };\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.deletePlaylist = this.deletePlaylist.bind(this);\r\n    this.getPlaylist = this.getPlaylist.bind(this);\r\n    this.editPlaylist = this.editPlaylist.bind(this);\r\n    this.updatePlaylist = this.updatePlaylist.bind(this);\r\n    this.onExit = this.onExit.bind(this);\r\n    this.createPlaylist = this.createPlaylist.bind(this);\r\n  }\r\n\r\n  displayPlaylist() {\r\n    if (this.state.edit === 'none') {\r\n      return null;\r\n    } else {\r\n      return (\r\n        <PlayList\r\n          onExit={this.onExit}\r\n          onSave={\r\n            this.state.edit === 'create'\r\n              ? this.savePlaylist\r\n              : this.updatePlaylist\r\n          }\r\n          updateName={this.updatePlaylistName}\r\n          removeTrack={this.removeTrack}\r\n          playListName={this.state.playListName}\r\n          playListTracks={this.state.playListTracks}\r\n          edit={this.state.edit}\r\n          search={this.search}\r\n          addTrack={this.addTrack}\r\n          searchResults={this.state.searchResults}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  savePlaylist() {\r\n    this.setState(\r\n      {\r\n        trackURIs: this.state.playListTracks.map(x => x.uri)\r\n      },\r\n      () => {\r\n        Spotify.savePlaylist(\r\n          this.state.playListName,\r\n          this.state.trackURIs\r\n        ).then(this.getPlaylist());\r\n        this.onExit();\r\n      }\r\n    );\r\n  }\r\n\r\n  deletePlaylist(playlistId) {\r\n    const newPlaylist = this.state.yourPlaylists.filter(\r\n      x => x.id !== playlistId\r\n    );\r\n    Spotify.deletePlayList(playlistId)\r\n      .then(this.setState({ yourPlaylists: newPlaylist }))\r\n      .catch(e => console.error(e));\r\n  }\r\n\r\n  editPlaylist(playlistId, playListName) {\r\n    // this.setState({ edit: true });\r\n    console.log('in getPlaylist');\r\n    console.log(playlistId);\r\n    Spotify.getThisPlaylist(playlistId)\r\n      .then(response => {\r\n        this.setState({\r\n          playListTracks: response,\r\n          edit: 'edit',\r\n          playListName: playListName,\r\n          playListId: playlistId\r\n        });\r\n      })\r\n      .catch(e => console.error('failure ' + e));\r\n    // this.setState({ playListName: playListName });\r\n  }\r\n\r\n  createPlaylist() {\r\n    this.setState({ edit: 'create' });\r\n  }\r\n\r\n  addTrack(track) {\r\n    console.log('add Track clicked!');\r\n    if (this.state.playListTracks.filter(x => x.id === track.id).length === 0) {\r\n      console.log('track is not yet existing in Playlist');\r\n      console.log(track);\r\n      this.setState({ playListTracks: [...this.state.playListTracks, track] });\r\n    } else {\r\n      console.log(\r\n        'track is already existing in Playlist, nothing will be done'\r\n      );\r\n    }\r\n  }\r\n\r\n  removeTrack(track) {\r\n    console.log('removing track');\r\n    let tmpTrack = this.state.playListTracks.filter(x => x.id !== track.id);\r\n    this.setState({ playListTracks: tmpTrack });\r\n  }\r\n\r\n  getPlaylist() {\r\n    console.log('in getPlaylist');\r\n    Spotify.getPlaylist().then(response => {\r\n      console.log(response);\r\n      this.setState({ yourPlaylists: response });\r\n    });\r\n  }\r\n\r\n  updatePlaylist() {\r\n    console.log('UPADTE');\r\n    this.setState(\r\n      {\r\n        trackURIs: this.state.playListTracks.map(x => x.uri)\r\n      },\r\n      () =>\r\n        Spotify.editPlaylist(this.state.playListId, this.state.trackURIs).then(\r\n          this.onExit()\r\n        )\r\n    );\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({ playListName: name });\r\n  }\r\n\r\n  search(item) {\r\n    Spotify.getAccessToken();\r\n    console.log(`looking for ${item}`);\r\n    Spotify.searchTrack(item).then(x => {\r\n      console.log(x);\r\n      this.setState({ searchResults: x });\r\n    });\r\n  }\r\n\r\n  onExit() {\r\n    this.setState({\r\n      edit: 'none',\r\n      playListName: '',\r\n      playListId: '',\r\n      trackURIs: [],\r\n      playListTracks: [],\r\n      searchResults: []\r\n    });\r\n  }\r\n\r\n  render() {\r\n    Spotify.getAccessToken();\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>\r\n          Spoti<span className=\"highlight\">jam</span>\r\n        </h1>\r\n        {/* <SearchBar onSearch={this.search} connected={Spotify.connected} /> */}\r\n        <div className=\"App-playlist\">\r\n          <YourPlaylist\r\n            getPlaylist={this.getPlaylist}\r\n            deletePlaylist={this.deletePlaylist}\r\n            playlists={this.state.yourPlaylists}\r\n            editPlaylist={this.editPlaylist}\r\n            createPlaylist={this.createPlaylist}\r\n          />\r\n          {/* <SearchResults\r\n            addTrack={this.addTrack}\r\n            searchResults={this.state.searchResults}\r\n          /> */}\r\n          {this.displayPlaylist()}\r\n          {/* <PlayList\r\n            onExit={this.onExit}\r\n            onSave={\r\n              this.state.edit === 'create'\r\n                ? this.savePlaylist\r\n                : this.updatePlaylist\r\n            }\r\n            updateName={this.updatePlaylistName}\r\n            removeTrack={this.removeTrack}\r\n            playListName={this.state.playListName}\r\n            playListTracks={this.state.playListTracks}\r\n            edit={this.state.edit}\r\n            search={this.search}\r\n            addTrack={this.addTrack}\r\n            searchResults={this.state.searchResults}\r\n          /> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}